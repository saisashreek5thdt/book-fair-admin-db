generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      String  @default("USER") // ADMIN, SUPER_ADMIN, USER
  createdAt DateTime @default(now())
}

model Speaker {
  id          Int     @id @default(autoincrement())
  name        String
  designation String
  note        String?
  image       Bytes?   // Changed from String (Cloudinary URL) to BLOB
  isActive    Boolean  @default(true) 
  createdAt   DateTime @default(now())
  events      Event[]
}

model Event {
  id               Int       @id @default(autoincrement())
  day              String
  date             DateTime
  eventName        String
  eventDescription String
  isActive         Boolean  @default(true)
  speakers         Speaker[]
}

model Banner {
  id        Int     @id @default(autoincrement())
  text      String?  
  content   String?  
  image     Bytes?  // Changed from String (Cloudinary URL) to BLOB
  isActive  Boolean  @default(true)
}

model Publisher {
  id             Int      @id @default(autoincrement())
  publisherName  String
  publisherEmail String
  boothNumbers   String[]
  logo           Bytes?   // Changed from String (Cloudinary URL) to BLOB
  books          Book[]
  createdAt      DateTime @default(now())
}

model Book {
  id          Int      @id @default(autoincrement())
  index       Int?
  title       String
  publisherId Int
  publisher   Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  @@unique([publisherId, index]) // Ensures unique indexing per publisher
}

model Gallery {
  id    Int    @id @default(autoincrement())
  image Bytes  // Stores bulk images as BLOB
}

model Team {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  shortName   String
  image       Bytes  // Stores team member images as BLOB
}

model Partner {
  id    Int    @id @default(autoincrement())
  image Bytes  // Stores partner images as BLOB
}

model AboutEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  date        DateTime
  video       Bytes?   // Store video as binary data (BLOB)
}
